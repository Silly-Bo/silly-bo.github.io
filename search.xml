<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx安装和基础代理配置]]></title>
    <url>%2F2019%2F03%2F24%2Fnewpapername%2F</url>
    <content type="text"><![CDATA[一、安装windows电脑可以通过点击Nginx到官方网址进行下载，Mac电脑可以通过brew(又叫homebrew，Mac中的一款软件包管理工具）通过命令进行下载，下面是通过windows电脑演示 安装点击Nginx到官方网址下载 将下载的文件解压，放在的C盘下面，打开文件夹，找到nginx.exe直接点击启动，也可以通过CMD终端，cd到文件夹下输入strat nginx启动 12345678网上找的一些nginx常用命令start nginx 开启nginxnginx -s stop 快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。nginx -s quit 平稳关闭Nginx，保存相关信息，有安排的结束web服务。nginx -s reload 因改变了Nginx相关配置，需要重新加载配置而重载。nginx -s reopen 重新打开日志文件。nginx -c filename 为 Nginx 指定一个配置文件，来代替缺省的。。nginx -v 显示 nginx 的版本。 启动后在浏览器地址栏输入localhost:8080,就会显示下图页面了 二、配置 找到nginx解压后的文件夹，我的文件夹在c盘根目录 1C:\nginx-1.14.2 打开的文件夹中找到nginx.conf文件并打开，找到下面的这个代码，在下面加一段代码include servers/*,如果有这段代码，直接将前面的#去掉，然后在跟nginx.conf同级目录下，创建一个servers文件夹，文件夹下面创建一个.conf的文件， 123456789101112131415161718|--conf |--servers |--test.conf |--fastcgi.conf |--fastcgi_params |--koi-utf |--koi-win |--mime.types |--nginx.conf |--scgi_params |--uwsgi_params |--win-utf|--contrib|--docs|--html|--logs|--temp|--nginx.exe 12#gzip on; /*我这里是33行*/include servers/*; /*include在这里是导入servers下面所有的.conf文件*/ servers文件夹下test.conf文件配置 1234567891011121314server &#123; #监听的端口号 listen 80; #用来指定ip地址或者域名，多个配置之间用空格分隔,假如在本地运行，配置www.xx.com就需要去更改电脑的host文件 #如何更改host：在C:\Windows\System32\drivers\etc目录下的host文件中添加一条DNS记录：127.0.0.1 www.test.com server_name test.com; #反向代理代理服务器访问模式 location / &#123; proxy_pass http://127.0.0.1:8888; //代理的地址 &#125;&#125; 通过node先启动一个服务 12345const http = require('http');http.createServer((req,res)=&gt;&#123; console.log('请求的地址',req.headers.host) res.end('请求了')&#125;).listen(8888) 在浏览器地址栏输入www.test.com启动的server.js后台就会打印出来代理请求的地址 1请求的地址 127.0.0.1:8888 设置hostnginx为了实现反向代理的需求而增加了一个ngx_http_proxy_module模块。其中proxy_set_header指令就是该模块需要读取的配置文件。在这里，所有设置的值的含义和http请求头中的含义完全相同，除了Host外还有X-Forward-For。Host的含义是表明请求的主机名，因为nginx作为反向代理使用，而如果后端的服务器设置有类似防盗链或者根据http请求头中的host字段来进行路由或判断功能的话，如果反向代理层的nginx不重写请求头中的host字段，将会导致请求失败【默认反向代理服务器会向后端真实服务器发送请求，并且请求头中的host字段应为proxy_pass指令设置的服务器】。同理，X_Forward_For字段表示该条http请求是有谁发起的？如果反向代理服务器不重写该请求头的话，那么后端真实服务器在处理时会认为所有的请求都来在反向代理服务器，如果后端有防攻击策略的话，那么机器就被封掉了。因此，在配置用作反向代理的nginx中一般会增加两条配置，修改http的请求头： 12proxy_set_header Host $http_host;proxy_set_header X-Forward-For $remote_addr; 这里的$http_host和$remote_addr都是nginx的导出变量，可以再配置文件中直接使用。如果Host请求头部没有出现在请求头中，则$http_host值为空，但是$host值为主域名。因此，一般而言，会用$host代替$http_host变量，从而避免http请求中丢失Host头部的情况下Host不被重写的失误。12345location / &#123; proxy_pass http://127.0.0.1:8888; //代理的地址 proxy_set_header Host $host; proxy_set_header X-Forward-For $remote_addr; &#125; 这个时候server.js下面打印的地址就是指定的host了1请求的地址 www.test.com]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo写博客与发布]]></title>
    <url>%2F2019%2F03%2F22%2FHexo%2F</url>
    <content type="text"><![CDATA[一、写博客刚开始时候不知道怎么设置标签和分类，然后网上找了一些资料搞定了，记录一下，先创建一个.md的文件放到 /source/_posts文件夹中，在刚建的.md文件中进行一系列的操作。 操作先在git bash中命令新建.md的文件1hexo new newpapername 然后source/_posts文件夹下面新创建个newpapername.md文件，打开newpapername.md文件就可以写自己的东西了，原来自动生成的是下面的样子 1234---title: newpapernamedate: 2019-03-22 15:38:48--- 这个时候根据自己文章的内容进行分类和添加标签，下面是这篇文件设定的标签和文件夹12345678910---title: hexo写博客与发布date: 2019-03-22 14:11:32categories: # 这里写的分类会自动汇集到 categories 页面上，分类可以多级# - 实用技术 # 一级分类- 个人博客 # 二级分类 tags: # 这里写的标签会自动汇集到 tags 页面上- 实用 # 可配置多个标签，注意格式- 个人博客--- 这里我只设置了一个分类，默认是一级分类，生成后的图片如下 这里点击分类的时候显示就能显示自己设定的个人博客分类了 上面设定了两个标签，一个是实用，一个是个人博客，现在也一样可以显示了 补充一下：将本地图片截取的图片生成在线地址，我这里用的是七牛云地址已经贴上。 二、发布到github操作 生成SSH添加到GitHub在git bash 中输入命令，设置用户名和邮箱 12git config --global user.name "yourname"git config --global user.email "youremail" 然后创建SSH,一路回车 1ssh-keygen -t rsa -C "youremail" 这个时候电脑C盘里面就生成了.ssh的文件夹 简单的说ssh就是一个密钥，id_rsa是私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。然后在GitHub的settings中找到SSH and GPG keys 选项 查看是否成功 1ssh -T git@github.com 将hexo部署到GitHub我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改YourgithubName 就是你创建的gitHub名字。 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 安装deploy-git,也就是部署的命令,这样你才能用命令部署到GitHub。 1npm install hexo-deployer-git --save 然后执行 123hexo clean hexo generate # 可以缩写 hexo ghexo deploy # 可以缩写 hexo d 注意deploy时可能要你输入username和password。 部署到GitHub出现404页面出现这个问题的主要原因是因为起名字的时候没有和前面博客名字保持一致，只需要在settings中将名字改成一致，保存后，刷新页面即可 三、 在其他电脑上操作 跟上面一样需要安装安装git，安装node，安装hexo，安装配置name，配置邮箱名，配置ssh key密钥……等 1234git，配置name，配置邮箱名，生成ssh key 与github配置授权 将github上面的代码克隆下来 1git clone git@github.com:Silly-Bo/Silly-Bo.github.io.git 进入到克隆的文件仓库中 123cd xxx.github.ionpm install npm install hexo-deployer-git --save 生成、部署 12hexo g hexo d 可以写新博客了 1hexo new newpage 别忘记提交 123git add . git connit -m &apos;XXXX&apos;git push 如果已经在克隆过的电脑上要实用的话，需要先拉新项目 1git pull 参考：zjufangzh]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[搭建此博客的目的就是为了能记录自己平时学习的点滴，之前学习的一些东西太散不好集中复习，现在搭建这个小博客，就是希望能够以后学习的东西可以记录在一起，便于自己更好的复习查看。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
</search>
